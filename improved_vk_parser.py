#!/usr/bin/env python3
"""
üéÇ –£–ª—É—á—à–µ–Ω–Ω—ã–π VK Birthday Parser –¥–ª—è –±–æ—Ç–∞ "–ü–æ–¥–∞—Ä–∏ –ø–µ—Å–Ω—é"

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º —É—Å–ª—É–≥–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
"""

import vk_api
import requests
import json
import time
import logging
import random
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ImprovedVKParser:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
        if not VK_TOKEN:
            raise ValueError("VK_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.py")
            
        self.vk_session = vk_api.VkApi(token=VK_TOKEN)
        self.vk = self.vk_session.get_api()
        
        # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if VK_USER_TOKEN:
            self.user_session = vk_api.VkApi(token=VK_USER_TOKEN)
            self.user_vk = self.user_session.get_api()
            logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            self.user_vk = None
            logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
            
        self.birthday_data = self.load_birthday_data()
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.popular_groups = [
            '27895931',  # –ü–æ–¥—Å–ª—É—à–∞–Ω–æ
            '29534144',  # MDK
            '40316705',  # –õ–µ–Ω—Ç–∞—á
            '147415230', # –ë–æ—Ä—â
            '154274761', # –°–º–µ—à–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            '205865157', # –ü–∏–∫–∞–±—É
            '1',         # –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
            '2',         # –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
            '3',         # –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
            '4',         # –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
            '5'          # –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        ]
        
    def load_birthday_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(DATABASE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return {'processed_users': [], 'sent_messages': [], 'stats': {}}
            
    def save_birthday_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        with open(DATABASE_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.birthday_data, f, ensure_ascii=False, indent=2)
            
    def get_birthday_range(self) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
        today = datetime.now()
        start_date = today + timedelta(days=BIRTHDAY_DAYS_RANGE[0])
        end_date = today + timedelta(days=BIRTHDAY_DAYS_RANGE[1])
        
        return start_date.strftime("%d.%m"), end_date.strftime("%d.%m")
        
    def search_birthday_users_advanced(self) -> List[Dict]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        logger.info("üéØ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è...")
        
        birthday_users = []
        start_date, end_date = self.get_birthday_range()
        
        # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º
        logger.info("üìã –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –≥—Ä—É–ø–ø–∞–º")
        group_users = self.search_in_groups()
        birthday_users.extend(group_users)
        
        # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        logger.info("üîç –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ")
        search_users = self.search_via_vk_search()
        birthday_users.extend(search_users)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_users = self.remove_duplicates(birthday_users)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_users)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –î–† —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π")
        return unique_users
        
    def search_in_groups(self) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö"""
        users = []
        
        for group_id in self.popular_groups:
            try:
                logger.info(f"üîç –ü–æ–∏—Å–∫ –≤ –≥—Ä—É–ø–ø–µ {group_id}...")
                
                # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
                members = self.vk.groups.getMembers(
                    group_id=group_id,
                    count=1000,
                    fields='bdate,sex,relation,relation_partner,first_name,last_name'
                )
                
                for member in members['items']:
                    if self._is_birthday_soon(member):
                        users.append(member)
                        
                time.sleep(PARSING_DELAY)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
                continue
                
        return users
        
    def search_via_vk_search(self) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
        users = []
        today = datetime.now()
        
        # –ü–æ–∏—Å–∫ –ø–æ –¥–Ω—è–º —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
        for days_ahead in range(BIRTHDAY_DAYS_RANGE[0], BIRTHDAY_DAYS_RANGE[1] + 1):
            search_date = today + timedelta(days=days_ahead)
            date_str = search_date.strftime("%d.%m")
            
            try:
                logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –î–† {date_str}...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                search_results = self.vk.users.search(
                    q=f"–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {date_str}",
                    count=100,
                    fields='bdate,sex,relation,relation_partner,first_name,last_name'
                )
                
                for user in search_results['items']:
                    if self._is_birthday_soon(user):
                        users.append(user)
                        
                time.sleep(PARSING_DELAY)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å –î–† {date_str}: {e}")
                continue
                
        return users
        
    def _is_birthday_soon(self, user: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–∫–æ—Ä–æ –ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π)"""
        if 'bdate' not in user or not user['bdate']:
            return False
            
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY –∏–ª–∏ DD.MM)
            bdate_parts = user['bdate'].split('.')
            if len(bdate_parts) < 2:
                return False
                
            bday_day = int(bdate_parts[0])
            bday_month = int(bdate_parts[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –î–† —Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
            today = datetime.now()
            birthday_date = today + timedelta(days=7)
            
            return birthday_date.day == bday_day and birthday_date.month == bday_month
            
        except (ValueError, IndexError):
            return False
            
    def remove_duplicates(self, users: List[Dict]) -> List[Dict]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        seen_ids = set()
        unique_users = []
        
        for user in users:
            if user['id'] not in seen_ids:
                seen_ids.add(user['id'])
                unique_users.append(user)
                
        return unique_users
        
    def get_user_partner(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.user_vk:
            logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ")
            return None
            
        try:
            user_info = self.user_vk.users.get(
                user_ids=user_id,
                fields='relation,relation_partner,sex,first_name,last_name'
            )
            
            if not user_info:
                return None
                
            user = user_info[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä
            if 'relation_partner' in user and user['relation_partner']:
                partner_id = user['relation_partner']['id']
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
                partner_info = self.user_vk.users.get(
                    user_ids=partner_id,
                    fields='first_name,last_name,sex,domain,can_write_private_message'
                )
                
                if partner_info:
                    partner = partner_info[0]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if partner.get('can_write_private_message', 0) == 1:
                        return {
                            'id': partner['id'],
                            'name': f"{partner['first_name']} {partner['last_name']}",
                            'sex': partner.get('sex', 0),
                            'domain': partner.get('domain', ''),
                            'relation_type': user.get('relation', 0)
                        }
                    else:
                        logger.info(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É {partner['id']}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
        return None
        
    def send_message_to_partner(self, partner: Dict, birthday_user: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
            birthday_user_sex = birthday_user.get('sex', 0)
            
            # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
            if birthday_user_sex == 1:  # –ñ–µ–Ω—â–∏–Ω–∞
                message_template = MESSAGE_TEMPLATES['male_partner'].format(BOT_LINK=BOT_LINK)
            else:  # –ú—É–∂—á–∏–Ω–∞
                message_template = MESSAGE_TEMPLATES['female_partner'].format(BOT_LINK=BOT_LINK)
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ VK API
            if self.user_vk:
                try:
                    self.user_vk.messages.send(
                        user_id=partner['id'],
                        message=message_template,
                        random_id=int(time.time())
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    self.birthday_data['sent_messages'].append({
                        'partner_id': partner['id'],
                        'partner_name': partner['name'],
                        'birthday_user_id': birthday_user['id'],
                        'birthday_user_name': f"{birthday_user.get('first_name', '')} {birthday_user.get('last_name', '')}",
                        'sent_at': datetime.now().isoformat(),
                        'message': message_template
                    })
                    
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É {partner['name']} (ID: {partner['id']})")
                    return True
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É {partner['id']}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
        return False
        
    def process_birthday_users(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        birthday_users = self.search_birthday_users_advanced()
        
        processed_count = 0
        messages_sent = 0
        
        for user in birthday_users:
            user_id = user['id']
            user_name = f"{user.get('first_name', '')} {user.get('last_name', '')}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.birthday_data['processed_users']:
                logger.info(f"‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
                
            try:
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name} (ID: {user_id})")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
                partner = self.get_user_partner(user_id)
                
                if partner:
                    logger.info(f"üíï –ù–∞–π–¥–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä: {partner['name']}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
                    if self.send_message_to_partner(partner, user):
                        messages_sent += 1
                else:
                    logger.info(f"üòî –ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
                        
                # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                self.birthday_data['processed_users'].append(user_id)
                processed_count += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(PARSING_DELAY)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                continue
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.save_birthday_data()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.update_stats(processed_count, messages_sent)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {processed_count}")
        logger.info(f"   üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_sent}")
        
        return processed_count, messages_sent
        
    def update_stats(self, processed_count: int, messages_sent: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        if 'stats' not in self.birthday_data:
            self.birthday_data['stats'] = {}
            
        if today not in self.birthday_data['stats']:
            self.birthday_data['stats'][today] = {
                'processed_users': 0,
                'messages_sent': 0,
                'runs': 0
            }
            
        self.birthday_data['stats'][today]['processed_users'] += processed_count
        self.birthday_data['stats'][today]['messages_sent'] += messages_sent
        self.birthday_data['stats'][today]['runs'] += 1

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        parser = ImprovedVKParser()
        processed_count, messages_sent = parser.process_birthday_users()
        
        print(f"\nüéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"   üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {processed_count}")
        print(f"   üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_sent}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()